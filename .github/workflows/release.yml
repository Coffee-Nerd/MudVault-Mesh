name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.1)'
        required: true
      release_type:
        description: 'Type of release'
        required: true
        default: 'stable'
        type: choice
        options:
          - stable
          - prerelease
      changelog:
        description: 'Release notes (optional)'
        required: false

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
      tag_exists: ${{ steps.validate.outputs.tag_exists }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate version format
        id: validate
        run: |
          VERSION="${{ github.event.inputs.version }}"
          
          # Check version format (semantic versioning)
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9-]+)?$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Version must follow semantic versioning (e.g., 1.0.1 or 1.0.1-beta.1)"
            exit 1
          fi
          
          # Check if tag already exists
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
            echo "‚ùå Tag v$VERSION already exists"
            exit 1
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "‚úÖ Version $VERSION is valid"

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: validate
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run typecheck

      - name: Run tests with coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key

      - name: Build project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [validate, build-and-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: dist/

      - name: Update package.json version
        run: |
          npm version ${{ needs.validate.outputs.version }} --no-git-tag-version
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json package-lock.json
          git commit -m "chore: bump version to ${{ needs.validate.outputs.version }}"

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          
          # Get the last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            echo "changelog=Initial release of MudVault Mesh v$VERSION" >> $GITHUB_OUTPUT
          else
            # Generate changelog from commits
            CHANGELOG=$(git log $LAST_TAG..HEAD --pretty=format:"- %s" --no-merges | head -20)
            
            if [ -z "$CHANGELOG" ]; then
              CHANGELOG="- Maintenance release"
            fi
            
            # Add custom changelog if provided
            CUSTOM_CHANGELOG="${{ github.event.inputs.changelog }}"
            if [ ! -z "$CUSTOM_CHANGELOG" ]; then
              CHANGELOG="$CUSTOM_CHANGELOG

            ## Changes:
            $CHANGELOG"
            fi
            
            # Save multiline string
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "## What's Changed in v$VERSION" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "$CHANGELOG" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Create Git tag
        run: |
          git tag -a "v${{ needs.validate.outputs.version }}" -m "Release v${{ needs.validate.outputs.version }}"
          git push origin "v${{ needs.validate.outputs.version }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.validate.outputs.version }}
          release_name: MudVault Mesh v${{ needs.validate.outputs.version }}
          body: |
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            
            ### Docker
            ```bash
            docker pull ghcr.io/mudvault/mesh:v${{ needs.validate.outputs.version }}
            ```
            
            ### npm
            ```bash
            npm install mudvault-mesh@${{ needs.validate.outputs.version }}
            ```
            
            ## Verification
            
            **Docker Image SHA**: `${{ steps.build.outputs.sha }}`
            
            You can verify the integrity of the release artifacts using the checksums below.
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.changelog.outputs.previous_tag }}...v${{ needs.validate.outputs.version }}
          draft: false
          prerelease: ${{ github.event.inputs.release_type == 'prerelease' }}

      - name: Build and push Docker image
        if: github.event.inputs.release_type == 'stable'
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          docker build -t ghcr.io/${{ github.repository_owner }}/mudvault-mesh:v${{ needs.validate.outputs.version }} .
          docker build -t ghcr.io/${{ github.repository_owner }}/mudvault-mesh:latest .
          
          docker push ghcr.io/${{ github.repository_owner }}/mudvault-mesh:v${{ needs.validate.outputs.version }}
          docker push ghcr.io/${{ github.repository_owner }}/mudvault-mesh:latest

      - name: Update main branch
        run: |
          git push origin HEAD:main

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate, create-release]
    if: always()
    steps:
      - name: Notify success
        if: needs.create-release.result == 'success'
        run: |
          echo "üéâ Successfully released MudVault Mesh v${{ needs.validate.outputs.version }}"
          
      - name: Notify failure
        if: needs.create-release.result == 'failure'
        run: |
          echo "‚ùå Failed to release MudVault Mesh v${{ needs.validate.outputs.version }}"
          exit 1